' Wiper-Controller.bs2
' {$STAMP BS2}
' {$PBASIC 2.5}

POT_PIN CON 0
SERVO_PIN CON 15
CHARGE_STATE CON 1
CHARGE_TIME CON 1
MAPPING_M CON 19
MAPPING_X1 CON 619
MAPPING_Y1 CON 0
FIFTEEN_DEG CON 333
ONE_HUNDRED_SIXTY_DEG CON 1139

discharge_time VAR Word
pulse_width VAR Word
delta_pulse_width VAR Word
direction VAR Bit

pulse_width = 0
direction = 0

DO
  ' Set POT_PIN to output the charging voltage and wait CHARGE_TIME
  DIRS = DIRS | (1 << POT_PIN)
  ' If CHARGE_STATE is high, set OUTS Pot. bit to high
  OUTS = OUTS | (CHARGE_STATE * (1 << POT_PIN))
  ' If CHARGE_STATE is low, set OUTS Pot. bit to low
  OUTS = OUTS & (~ ( (CHARGE_STATE ^ 1) * (1 << POT_PIN)))
  PAUSE CHARGE_TIME

  ' Discharge the capacitor through the Potentionmeter and record time
  RCTIME POT_PIN, CHARGE_STATE, discharge_time

  ' Map the discharge_time input to the delta_pulse_width per period
  discharge_time = discharge_time MIN MAPPING_X1
  delta_pulse_width = MAPPING_Y1 + ((discharge_time - MAPPING_X1) */ MAPPING_M)

  ' Change the pulse_width based on the delta_ variable and the current direction
  IF (direction = 0) THEN Invert_Delta_Variable
  Invert_Return:
  pulse_width = pulse_width + delta_pulse_width

  ' Change Directions if Angular Displacement is at Min or Max
  IF (pulse_width <= FIFTEEN_DEG) THEN Invert_Direction
  IF (pulse_width >= ONE_HUNDRED_SIXTY_DEG) THEN Invert_Direction
  Invert_Direction_Return:

  ' Generate Pulse-Width Waveform for Servo
  pulse_width = pulse_width MIN FIFTEEN_DEG MAX ONE_HUNDRED_SIXTY_DEG
  PULSOUT SERVO_PIN, pulse_width
  PAUSE (19 - CHARGE_TIME)
LOOP

Invert_Delta_Variable:
  ' Two's Complement
  delta_pulse_width = 1 + (~delta_pulse_width)
GOTO Invert_Return

Invert_Direction:
  direction = direction ^ 1
GOTO Invert_Direction_Return
