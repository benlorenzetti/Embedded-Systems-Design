' The-Last-Music-Trainer.bs2
' {$STAMP BS2}
' {$PBASIC 2.5}

P_PIEZO CON 13
P_POT CON 14
P_SWITCH CON 15
P_OCT_4 CON 8
P_OCT_5 CON 9
P_OCT_6 CON 10
P_OCT_7 CON 11
P_SHARP CON 4
OUTS = $0000 + (1 << P_SWITCH)
DIRS = $FFFF

' Constants Related to the Bit Packing of Song Data
BITS_PER_NOTE CON 10
NOTE_MASK CON %0001110000
NOTE_SHIFT CON 4
SHARP_FLAG CON 7
TYPE_MASK CON %0000000111
TYPE_SHIFT CON 0
DOTTED_FLAG CON 3
OCTAVE_MASK CON %1100000000
OCTAVE_OFFSET CON 8

' Constants Related to the Byte Packing of Song Data
TEMPO_OFFSET CON 0
NUMBER_OF_NOTES_OFFSET CON 1
FIRST_NOTE_OFFSET CON 2

CHARGE_TIME CON 1
MILLISECONDS_PER_MINUTE CON 60000

' Store Several Songs in EEPROM
NUMBER_OF_SONGS CON 1

' Walk of Life; Tempo=160, Notes=34
DATA 160, 34, 26, 105, 36, 215, 92, 211, 141, 37, 209, 88, 83, 41, 165, 148
DATA 92, 113, 201, 53, 213, 88, 26, 105, 36, 215, 92, 83, 141, 37, 209, 88
DATA 82, 41, 165, 148, 92, 115, 77, 53, 150, 68, 99, 77, 5

' Declare Variables
song VAR Nib
note VAR Word
current_bit VAR Bit
bit_index VAR Word
song_start_index VAR Word
data_byte VAR Byte
note_type VAR Nib
note_dotted VAR Bit
note_letter VAR Byte
note_sharp VAR Bit
oct7_freq VAR Word
note_octave VAR Nib
default_tempo VAR Byte
song_size VAR Byte
notes_played VAR Byte
speed_factor VAR Nib
duration VAR Word
pushbutton_switch VAR Bit


Start:
song = 0
song_start_index = 0

Reset_Song_Parameters:
  READ ((song_start_index / 8) + TEMPO_OFFSET), default_tempo
  READ ((song_start_index / 8) + NUMBER_OF_NOTES_OFFSET), song_size
  bit_index = song_start_index + (8 * FIRST_NOTE_OFFSET)
DEBUG "song=", DEC song, ", song_size=", DEC song_size, ", song_start_index=", DEC song_start_index, ", bit_index=", DEC bit_index, CR

Load_Data_Byte_from_EEPROM:
  READ (bit_index >> 3), data_byte
DEBUG "data_byte[", DEC (bit_index / 8), "]=", DEC data_byte, CR

Get_Bit_from_Data_Byte:
  current_bit = 1 & (data_byte >> (bit_index // 8))
DEBUG "current_bit[", DEC bit_index, "]=", DEC current_bit, CR

Is_New_Bit_Part_of_a_New_Note:
  IF (0 = ((bit_index - ((song + 1) * FIRST_NOTE_OFFSET * 8)) // BITS_PER_NOTE)) THEN Play_and_Reset_Note
  'else Load current_bit into note

Load_Bit_into_Note:
  note = note | (current_bit << (bit_index // BITS_PER_NOTE))

Increment_Bit_Index:
  bit_index = 1 + bit_index

Is_a_New_Data_Byte_Needed:
  IF (0 = (bit_index // 8)) THEN Load_Data_Byte_from_EEPROM
  'Else'
  GOTO Get_Bit_from_Data_Byte

Play_and_Reset_Note:
  ' Decode Note
  note_type = 1 << (note & $0007)
  duration = MILLISECONDS_PER_MINUTE / (default_tempo * speed_factor * note_type)
  note_dotted = (note & (1 << DOTTED_FLAG)) >> DOTTED_FLAG
  duration = duration + (note_dotted * (duration >> 1))
  note_letter = (note & (NOTE_MASK | SHARP_FLAG)) >> NOTE_SHIFT
  LOOKUP note_letter, [3520, 3951, 2093, 2349, 2637, 2794, 3136, 0, 3729, 0, 2218, 2489, 0, 2960, 3322, 0], oct7_freq
  note_octave = (note & OCTAVE_MASK) >> OCTAVE_OFFSET
  DEBUG "note_type=", BIN3 note_type, ", note_dotted=", DEC note_dotted, ", duration=", DEC duration, ", note_letter=", BIN4 note_letter, ", oct7_freq=", DEC oct7_freq, ", note_octave=", DEC note_octave, CR
  ' Play the Note
  FREQOUT P_PIEZO, duration, (oct7_freq >> (3-note_octave))
  ' Reset Note
  note = 0



Perform_All_User_IO:
  ' Display Letter of 7-Segment Display
  note_letter = (note & NOTE_MASK) >> NOTE_SHIFT
  DEBUG "note_letter=", DEC note_letter
  LOOKUP note_letter, [$AF, $E3, $C6, $E9, $C7, $87, $6F, $00], note_letter
  OUTS = (OUTS & $FF00) | note_letter
  ' Display "Sharp" Decimal Points on 7-Segment Display
  note_sharp = (note & (1 << SHARP_FLAG)) >> SHARP_FLAG
  OUTS = (OUTS & ($FFFF - (1 << P_SHARP))) | (note_sharp << P_SHARP)
  ' Read Speed from Potentiometer
  HIGH P_POT
  PAUSE CHARGE_TIME
  RCTIME P_POT, 1, duration
  speed_factor = ((duration - 443) >> 8) + 1
  DEBUG ", speed_factor=", DEC speed_factor
  duration = MILLISECONDS_PER_MINUTE / (default_tempo * speed_factor)
  ' Read Pushbutton Switch for Advancing to Next Song
  pushbutton_switch = (INS & (1 << P_SWITCH)) >> P_SWITCH
  DEBUG ", pushbutton_switch=", DEC pushbutton_switch, CR
  DIRS = DIRS | (1 << P_SWITCH)
  OUTS = OUTS | (1 << P_SWITCH)
  PAUSE CHARGE_TIME
  DIRS = DIRS & ($FFFF - (1 << P_SWITCH))
  IF (0 = pushbutton_switch) THEN Advance_to_Next_Song
  ' ELSE Is the song Over?

Is_the_Song_Over:
  DEBUG "Is the song Over?...", CR
  IF (bit_index = (song_start_index + (song_size * BITS_PER_NOTE) + (FIRST_NOTE_OFFSET * 8))) THEN Reset_Song_Parameters
  ' ELSE
  DEBUG "...no", CR
  GOTO Load_Bit_into_Note:

Advance_to_Next_Song:
  DEBUG "advancing to song ", DEC song, CR
  song = (song + 1) // NUMBER_OF_SONGS
  bit_index = 0
  i VAR Nib
  FOR i = 1 TO song
    READ ((bit_index / 8) + NUMBER_OF_NOTES_OFFSET), data_byte
    bit_index = bit_index + (8 * FIRST_NOTE_OFFSET) + (10 * data_byte)
    i = i + 1
  NEXT
  song_start_index = bit_index
  DEBUG "song_start_index set to ", DEC bit_index, CR
  GOTO Reset_Song_Parameters:
